# 1) Crear una funci칩n que le solicite al usuario el ingreso de un n칰mero entero y lo retorne.

def devolver_numero_entero(numero_ingresado):
    """
    proposito: devuelve el n칰mero entero ingresado por el usuario.

    Parametro:
        numero_ingresado (int): el parametro que se devolver치.
    Returns:
        int: Devuelve el n칰mero entero ingresado.
    """
    if isinstance(numero_ingresado, int): #Evalua si el n칰mero ingresado es un entero.
        return numero_ingresado
    else:
        return "Lo que ha ingresado no es un entero."



# print(devolver_numero_entero(4.7))

# No s칠 si est치 bien as칤 o pide que se pueda ingresar el parametro desde la consola con el input.

# 2) Crear una funci칩n que le solicite al usuario el ingreso de un n칰mero flotante y lo retorne.

# def devolver_numero_flotante(numero_ingresado):
#     """
#         Proposito: devuelve el numero flotante ingresado.

#         Parametro:
#             numero_ingresado (floar): parametro que se devolver치.
#         Return:
#             float: retorna el n칰mero ingresado.
#     """
#     if isinstance(numero_ingresado, float): #Evalua si el n칰mero ingresado es un entero.
#         return numero_ingresado
#     else:
#         return "Lo que ha ingresado no es un flotante."
    

def devolver_numero_flotante2(numero_ingresado):
    """
        Proposito: devuelve el numero flotante ingresado.

        Parametro:
            numero_ingresado (floar): parametro que se devolver치.
        Return:
            float: retorna el n칰mero ingresado.
    """
    numero = input("Ingrese un n칰mero: ")
    if not numero.isdigit() and not numero.isalpha():  # Evalua si el caracter ingresado no es un n칰mero entero y si no es caracter alfabetico
        return f"{numero_ingresado} es un flotante"
    else:
        return "Lo que ha ingresado no es un flotante."
    
# No s칠 si est치 bien.

# print(devolver_numero_flotante(4))
# print(devolver_numero_flotante(8.5))



# 3) Crear una funci칩n que le solicite al usuario el ingreso de una cadena y la retorne. 

def devolver_cadena(cadena_ingresada):
    """
        Proposito: devuelve la cadena de caracteres ingresada.

        Parametros:
            cadena_ingresada (str): cadena que se va a retornar.

        Return:
            str: retorna la cadena ingresada.
    """
    if isinstance(cadena_ingresada, str):
        return cadena_ingresada
    else:
        return "Lo que ha ingresado no es una cadena de caracteres."

# Intentar usar isalnum()


# 4) Escribir una funci칩n que calcule el 치rea de un rect치ngulo. La funci칩n recibe la base y la altura y retorna el 치rea

def area_del_rectangulo(base, altura):
    """
        Proposito: retorna el 치res de un rectangulo.

        Precondici칩n:
            base (float o int): medida de la base del triangulo
            altura (float o int): medida de la altura del triangulo.

        Return: retorna el resultado de la base por la altura.
    """

    if es_enetro_o_flotante(base) and es_enetro_o_flotante(altura):
        return base * altura
    else:
        return "Alguno de los datos ingresados no es un n칰mero."


def es_enetro_o_flotante(numero):
    """
        Prop칩sito: retorna si el dato ingresado es un n칰mero

        Parametro:
            numero (float o int): n칰mero que se evaluara.

        Return: retorna un bool dependiendo si el elemento ingresado es un n칰mero, ya sea int o float.
    """

    return isinstance(numero, int) or isinstance(numero, float)


# print(area_del_rectangulo(3,5))


# 5) Escribe una funci칩n que calcule el 치rea de un c칤rculo. La funci칩n debe recibir el radio como par치metro y devolver el 치rea.

def area_del_circulo(radio):
    """
        Proposito: calcula el radio de un circulo.

        Parametro: 
            radio (float): radio del circulo 

        Return: la multiplicaci칩n de pi por el radio al cuadrado.
    """
    if es_enetro_o_flotante(radio):
        respuesta = 3.1416 * (radio * radio)
        return f"El area del circulo es {respuesta}"
    else:
        return "No ha ingresado un n칰mero valido."


# 6) Crea una funci칩n que verifique si un n칰mero dado es par o impar. La funci칩n debe imprimir un mensaje indicando si el n칰mero es par o impar.

def es_par_o_impar(n칰mero):
    """
        Proposito: Indica si el n칰mero ingresado ese par o impar.
        Parametro:
            n칰mero (int): n칰mero a evaluar si es par o impar.
        Return: retorna un string diciendo si el n칰mero ingresado es par o impar.
    """
    if isinstance(n칰mero, int):
        if n칰mero % 2 == 0:
            return f"El n칰mero {n칰mero} es par."
        else:
            return f"El n칰mero {n칰mero} es impar."
    else:
        return "No ha ingresado un n칰mero entero."
    

# 7) Crea una funci칩n que verifique si un n칰mero dado es par o impar. La funci칩n retorna True si el n칰mero es par, False en caso contrario.

def es_par_o_impar2(n칰mero):
    """
        Proposito: Indica si el n칰mero ingresado ese par o impar.
        Parametro:
            n칰mero (int): n칰mero a evaluar si es par o impar.
        Return: retorna True si le n칰mero ingresado es par y False en el caso contrario.
    """
    if isinstance(n칰mero, int):
        return n칰mero % 2 == 0
    else:
        return "No ha ingresado un n칰mero entero."


# 8) Define una funci칩n que encuentre el m치ximo de tres n칰meros. La funci칩n debe aceptar tres argumentos y devolver el n칰mero m치s grande.

def numero_mas_grande_entre_tres(a, b, c):
    """
        Proposito: retornar el n칰mero m치s grande entre los tres dados.
        Parametros:
            a (int o float) : n칰mero que se va a comparar con los dem치s 
            b (int o float) : n칰mero que se va a comparar con los dem치s 
            c (int o float) : n칰mero que se va a comparar con los dem치s 
        Return: retorna el n칰mero m치s grande.
    """
    if es_enetro_o_flotante(a) and es_enetro_o_flotante(b) and es_enetro_o_flotante(c):
        return numero_mas_grande(numero_mas_grande(a, b), c)
    else:
        return "Alguno de los datos ingresados es erroneo."


def numero_mas_grande(a, b):
    """
        Proposito: retorna el n칰mero m치s grande entre los dos dados.
        Parametros:
            a (int o float) : n칰mero que se va a comparar con b
            b (int o float) : n칰mero que se va a comparar con a
        Return: retorna el n칰mero m치s grande.
    """
    if a > b:
        return a
    else:
        return b

# print(numero_mas_grande_entre_tres(8,2,4))

# 9) Dise침a una funci칩n que calcule la potencia de un n칰mero. La funci칩n debe recibir la base y el exponente como argumentos y devolver el resultado.

def potencia_del_numero(base, exponente):
    """
        Proposito: calcular la base elvado al exponente dado.
        Parametros:
            base (int o float) : base a la que se multiplicar치 por si misma.
            exponente (int or float) : cantidad de veces por la que se multiplicar치 la base.
        Return: retorna el resultado de la base multiplicada por si misma tanta veces por el exponente dado.
    """
    resultado = 1
    for i in range(exponente):
        resultado *= base
    return resultado 

# print(potencia_del_numero(3,3))

# 10) Crear una funci칩n que reciba un n칰mero y retorne True si el n칰mero es primo, False en caso contrario.

def es_primo(numero):
    """
        Prop칩sito: Indicar si el n칰mero es primo.
        Parametro:
            numero (int) : n칰mero al cual se evaluar si es primo o no.
        Return: retorna True si el n칰mero ingresado es primo, en caso contrario retorna False.
    """
    cantidad_de_divisores = 0
    for i in range(1, numero + 1):
        if numero % i == 0:
            cantidad_de_divisores += 1

    return cantidad_de_divisores == 2

# print(es_primo(11))

# 11) Crear una funci칩n que (utilizando el algoritmo del ejercicio de la guia de for), muestre todos los n칰meros primos comprendidos entre entre la unidad y un n칰mero ingresado como par치metro. La funci칩n retorna la cantidad de n칰meros primos encontrados. Modularizar todo lo posible.

# 12) Crear una funci칩n que imprima la tabla de multiplicar de un n칰mero recibido como par치metro. La funci칩n debe aceptar par치metros opcionales (inicio y fin) para definir el rango de multiplicaci칩n. Por defecto es del 1 al 10.

# 13) Especializar las funciones del punto 1, 2 y 3 para hacerlas reutilizables. Agregar validaciones.



# Ejercicio de validaci칩n.

"""
游댳 Enunciado 1: Validar n칰mero decimal (float)
Objetivo: Crear una funci칩n que valide si un valor recibido como par치metro (string o n칰mero) puede interpretarse como un n칰mero decimal.

Enunciado:
Escrib칤 una funci칩n llamada es_float(valor) que reciba un solo par치metro. La funci칩n debe retornar True si el valor puede convertirse a float, ya sea que venga como string (por ejemplo, "3.14") o como n칰mero (3.14), y False en caso contrario.
Prob치 tu funci칩n con distintos valores como "3.14", 3.14, "texto", "12", 12, y None.
"""

def es_float(valor):
    """
        Prop칩sito: valida si la variable ingresada es un flotante.
        Parametro:
            valor (string o n칰mero) : valor a validar.
        Return: retorna True si la variable ingresada es un flotante.
    """
    sin_el_punto = ""
    cantidad_de_puntos = 0
    
    for i in str(valor):
        if i == ".":
            cantidad_de_puntos += 1
        else:
            sin_el_punto += i

    return sin_el_punto.isdigit() and cantidad_de_puntos == 1


print(es_float("3.14"))
print(es_float(3.14))
print(es_float("texto"))
print(es_float("12"))
print(es_float(12))
print(es_float(None))

"""
游댳 Enunciado 2: Validar n칰mero entero (int)
Objetivo: Crear una funci칩n que valide si un valor puede interpretarse como un n칰mero entero.

Enunciado:
Escrib칤 una funci칩n llamada es_entero(valor) que reciba un solo par치metro. La funci칩n debe retornar True si el valor puede convertirse a int, ya sea que venga como string ("5") o como n칰mero (5), y False en caso contrario.
Prob치 tu funci칩n con valores como "5", 5, "5.0", 5.0, "cinco" y None.
"""

def es_entero(valor):
    """
        Prop칩sito:
        Parametro:
        Return:
    """
    pass



"""
游댳 Enunciado 3: Validar si un valor es alfanum칠rico
Objetivo: Crear una funci칩n que verifique si un string es estrictamente alfanum칠rico.

Enunciado:
Escrib칤 una funci칩n llamada es_alfanumerico(valor) que reciba un par치metro y devuelva True si es un string compuesto 칰nicamente por letras y/o n칰meros (sin espacios, s칤mbolos o acentos), y False en caso contrario.
Prob치 la funci칩n con valores como "Hola123", "hola mundo", "123", "!!!", "" y None.
"""
    
# numero = 4.5
# print(numero.is_integer()) 

# numero2 = "12.5"
# print(numero2.isdigit())

# for i in numero:
#     if i == ".":
        # print("Es float")
    
# hola = str("hola")
# print(hola)

# nuevo_texto = ""

# for i in "hola":
#     if i == "h":
#         continue
#     nuevo_texto += i

# print(nuevo_texto)